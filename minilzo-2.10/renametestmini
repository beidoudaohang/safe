/* testmini.c -- very simple test program for the miniLZO library

   This file is part of the LZO real-time data compression library.

   Copyright (C) 1996-2017 Markus Franz Xaver Johannes Oberhumer
   All Rights Reserved.

   The LZO library is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License as
   published by the Free Software Foundation; either version 2 of
   the License, or (at your option) any later version.

   The LZO library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with the LZO library; see the file COPYING.
   If not, write to the Free Software Foundation, Inc.,
   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

   Markus F.X.J. Oberhumer
   <markus@oberhumer.com>
   http://www.oberhumer.com/opensource/lzo/
 */


#include <stdio.h>
#include <stdlib.h>


/*************************************************************************
// This program shows the basic usage of the LZO library.
// We will compress a block of data and decompress again.
//
// For more information, documentation, example programs and other support
// files (like Makefiles and build scripts) please download the full LZO
// package from
//    http://www.oberhumer.com/opensource/lzo/
**************************************************************************/

/* First let's include "minizo.h". */

#include "minilzo.h"
#include <unistd.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <stdlib.h>

#include "../include/helios.h"

/* We want to compress the data block at 'in' with length 'IN_LEN' to
 * the block at 'out'. Because the input block may be incompressible,
 * we must provide a little more output space in case that compression
 * is not possible.
 */

//just for test
#define MOD_NUM_IN_ONE_PCB 1
typedef union{
  u8 dat;
  struct{
    u8 st:4;  //PARA_ERR;
    u8 type:4;  //PARA_TYPE;
  }para_type;
}para_type;

typedef struct{
  para_type para_type_t;
  u16 len;
  void *pdat;
  u32 min;
  u32 max;
  void (*paradeal)(void);
}para_line;

typedef union{
  u8 dat;
  struct{
    u8 mod_link:2;  //MOD_LINK
    u8 mod_mimo:3;  //MOD_MIMO
    u8 mod_id:3;  //MOD_ID
  }mod_sub_adr;
}mod_adr;

typedef struct{
  u8 mod_type;  //MOD_TYPE
  u8 mod_band;
  mod_adr mod_adr_t;
}mod_adr_info;

typedef struct{
  mod_adr_info *pmod_adr_info;
  para_line para_line_t;
}mod_para_line;

typedef struct {
	u16 para_index;		/*参数编号*/
	mod_para_line mod_para_line_t[1];
	u8 authority;	//USR_AUTHORITY	/*操作该参数需要的权限*/
	u8 dig_adr;			/*是否需要发送给fpga*/
} para_table;


para_table para_table_arr[]={
  {0x10,{{NULL,{{8},40,NULL,0,0,NULL}}}}
};

para_table para_table_test[]={
{
	.para_index=1,
	.mod_para_line_t={
		{
			.pmod_adr_info={
				NULL
			},
			.para_line_t={
				.para_type_t={
					8,
				},
				.len=40,
				.pdat=NULL,
				.min=0,
				.max=0,
				.paradeal=NULL
			},
		}
	}
},
};



















#define IN_LEN      (128*1024ul)
#define OUT_LEN     (IN_LEN + IN_LEN / 16 + 64 + 3)

#define TEMP_SIZE 512

static unsigned char __LZO_MMODEL in  [ IN_LEN ];
static unsigned char __LZO_MMODEL out [ OUT_LEN ];
static unsigned char srcbuf[TEMP_SIZE]={0};
static unsigned char destbuf[TEMP_SIZE]={0};

/* Work-memory needed for compression. Allocate memory in units
 * of 'lzo_align_t' (instead of 'char') to make sure it is properly aligned.
 */

#define HEAP_ALLOC(var,size) \
    lzo_align_t __LZO_MMODEL var [ ((size) + (sizeof(lzo_align_t) - 1)) / sizeof(lzo_align_t) ]

static HEAP_ALLOC(wrkmem, LZO1X_1_MEM_COMPRESS);


/*************************************************************************
//
**************************************************************************/
/*
return:
  0---sus
  -1--err
 */
static char ctohex(const char *pstr,unsigned int srclen,char *pdest,unsigned int destlen,unsigned int *hexlen)
{
  unsigned char dat=0;
  unsigned int len=0;
  int cnt;

  if(!pstr)
    return -1;
  if(srclen%2)
    return -1;
  if(destlen<srclen)
    return -1;

  printf("start ch to hex\n");

  for(cnt=0;cnt<srclen;){
    if((pstr[cnt]>='a')&&(pstr[cnt]<='f')){
      dat=pstr[cnt]-87;
    }else if((pstr[cnt]>='0')&&(pstr[cnt]<='9')){
      dat=pstr[cnt]-48;
    }
    dat<<=4;
    if((pstr[cnt+1]>='a')&&(pstr[cnt+1]<='f')){
      dat|=(pstr[cnt+1]-87)&0x0f;
    }else if((pstr[cnt+1]>='0')&&(pstr[cnt+1]<='9')){
      dat|=(pstr[cnt+1]-48)&0x0f;
    } 
    *pdest=dat;

    cnt+=2;
    pdest++;
    len++;
  }

  *hexlen=len;

  return 0;
}
int main(int argc, char *argv[])
{
    int r;
    lzo_uint in_len;
    lzo_uint out_len;
    lzo_uint new_len;

    int unlzofile,lzofile,unlzostr,decompressfile;
    unsigned int reallen;
    unsigned char dat;

    if (argc < 0 && argv == NULL)   /* avoid warning about unused args */
        return 0;

    printf("\nLZO real-time data compression library (v%s, %s).\n",
           lzo_version_string(), lzo_version_date());
    printf("Copyright (C) 1996-2017 Markus Franz Xaver Johannes Oberhumer\nAll Rights Reserved.\n\n");


/*
 * Step 1: initialize the LZO library
 */
    if (lzo_init() != LZO_E_OK)
    {
        printf("internal error - lzo_init() failed !!!\n");
        printf("(this usually indicates a compiler bug - try recompiling\nwithout optimizations, and enable '-DLZO_DEBUG' for diagnostics)\n");
        return 3;
    }

/*
 * Step 2: prepare the input block that will get compressed.
 *         We just fill it with zeros in this example program,
 *         but you would use your real-world data here.
 */
    in_len = IN_LEN;
    lzo_memset(in,0,in_len);

    unlzofile=open("./unlzofile",O_RDONLY);
    if(unlzofile<0)
        printf("open unlzofile err\n");
    else
      printf("open unlzofile sus %d\n",unlzofile);

    lzofile=open("./lzofile",O_RDWR|O_CREAT,S_IRUSR|S_IWUSR);
    if(lzofile<0)
        printf("open lzofile err\n");

    unlzostr=open("./unlzostr",O_RDWR|O_CREAT,S_IRUSR|S_IWUSR);
    if (unlzostr<0)
    {
      /* code */
      printf("open unlzostr err\n");
    }

    decompressfile=open("./decompressfile",O_RDWR|O_CREAT,S_IRUSR|S_IWUSR);
    if (decompressfile<0)
    {
      /* code */
      printf("open decompressfile err\n");
    }

    printf("begin read dat\n");

    if((reallen=read(unlzofile,in,IN_LEN))>0){
          printf("read unlzofile sus,the dat len is:%d\n",reallen);
          printf("%s\n", in);
          ctohex(in,reallen,out,OUT_LEN,&in_len);        
    }else{
      printf("read file err\n");
    }

    printf("the str dat after ctohex:\n");
    printf("%s\n", out);
    lzo_memset(in,0,IN_LEN);
    lzo_memcpy(in,out,in_len);
    lzo_memset(out,0,OUT_LEN);

    if((reallen=write(unlzostr,in,in_len))!=in_len){
      printf("write unlzostr err\n");
    }else{
      if(-1==close(unlzostr)){
        printf("close unlzostr err\n");
      }
    }
/*
 * Step 3: compress from 'in' to 'out' with LZO1X-1
 */
    r = lzo1x_1_compress(in,in_len,out,&out_len,wrkmem);
    if (r == LZO_E_OK)
        printf("compressed %lu bytes into %lu bytes\n",
            (unsigned long) in_len, (unsigned long) out_len);
    else
    {
        /* this should NEVER happen */
        printf("internal error - compression failed: %d\n", r);
        return 2;
    }
    /* check for an incompressible block */
    if (out_len >= in_len)
    {
        printf("This block contains incompressible data.\n");
        return 0;
    }


    if((reallen=write(lzofile,out,out_len))!=out_len){
      printf("write lzofile err\n");
    }else{
      if(-1==close(lzofile)){
        printf("clsoe lzofile err\n");
      }
    }
/*
 * Step 4: decompress again, now going from 'out' to 'in'
 */

    //for test gx
    int gxlzofile;

    gxlzofile=open("./lzofile_gx.gx",O_RDONLY);
    lzo_memset(out,0,OUT_LEN);
    lzo_memset(in,0,IN_LEN);
    reallen=read(gxlzofile,out,OUT_LEN);
    out_len=reallen;
    printf("read gx file sus,file len is:%d\n", reallen);
    printf("the gx dat is:%s\n", out);
    //the end for test

    new_len = in_len;
    r = lzo1x_decompress(out,out_len,in,&new_len,NULL);
    if (r == LZO_E_OK && new_len == in_len)
        printf("decompressed %lu bytes back into %lu bytes\n",
            (unsigned long) out_len, (unsigned long) in_len);
    else
    {
        /* this should NEVER happen */
        printf("internal error - decompression failed: %d\n", r);
        return 1;
    }

    if((reallen=write(decompressfile,in,new_len))!=new_len){
      printf("write decompressfile err\n");
    }else{
      if(-1==close(decompressfile)){
        printf("close decompressfile err\n");
      }
    }

    close(unlzofile);

    printf("\nminiLZO simple compression test passed.\n");
    return 0;
}


/* vim:set ts=4 sw=4 et: */
